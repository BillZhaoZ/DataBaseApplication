package com.defineview.bill.mysqlitedemo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.defineview.bill.mysqlitedemo.greendao.entity.UserTwo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USERS_TABLE".
*/
public class UserTwoDao extends AbstractDao<UserTwo, Long> {

    public static final String TABLENAME = "USERS_TABLE";

    /**
     * Properties of entity UserTwo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key = new Property(1, String.class, "key", false, "KEY");
        public final static Property Name = new Property(2, String.class, "name", false, "userName");
        public final static Property AddTest = new Property(3, String.class, "addTest", false, "ADD_TEST");
        public final static Property AssTest2 = new Property(4, String.class, "assTest2", false, "ASS_TEST2");
    };


    public UserTwoDao(DaoConfig config) {
        super(config);
    }
    
    public UserTwoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USERS_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEY\" TEXT," + // 1: key
                "\"userName\" TEXT NOT NULL ," + // 2: name
                "\"ADD_TEST\" TEXT," + // 3: addTest
                "\"ASS_TEST2\" TEXT);"); // 4: assTest2
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "KEY_INDEX ON USERS_TABLE" +
                " (\"KEY\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USERS_TABLE_userName_DESC ON USERS_TABLE" +
                " (\"userName\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USERS_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserTwo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }
        stmt.bindString(3, entity.getName());
 
        String addTest = entity.getAddTest();
        if (addTest != null) {
            stmt.bindString(4, addTest);
        }
 
        String assTest2 = entity.getAssTest2();
        if (assTest2 != null) {
            stmt.bindString(5, assTest2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserTwo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }
        stmt.bindString(3, entity.getName());
 
        String addTest = entity.getAddTest();
        if (addTest != null) {
            stmt.bindString(4, addTest);
        }
 
        String assTest2 = entity.getAssTest2();
        if (assTest2 != null) {
            stmt.bindString(5, assTest2);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserTwo readEntity(Cursor cursor, int offset) {
        UserTwo entity = new UserTwo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // key
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // addTest
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // assTest2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserTwo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setAddTest(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAssTest2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserTwo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserTwo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
